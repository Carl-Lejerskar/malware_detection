from flask import Flask, jsonify, request
import pandas as pd
import pickle

app = Flask(__name__)

# read in model/preprocessor once in global scope
model_file = 'artifacts/gradient_boosting_malware_model.pkl'
preprocessor_file = 'artifacts/preprocessor.pkl'
with open(model_file, 'rb') as file:
    model = pickle.load(file)
with open(preprocessor_file, 'rb') as file:
    preprocessor = pickle.load(file) 

def preprocess_input(data, model, preprocessor):
    high_risk_permissions = [
        'com.android.launcher.permission.INSTALL_SHORTCUT',
        'android.permission.READ_PHONE_STATE',
        'android.permission.RECEIVE_BOOT_COMPLETED',
    ]
    try:
        # Creating a DataFrame from the input dictionary
        df = pd.DataFrame(data)
        # Calculate additional features
        df['enabled_permission_count'] = df.sum(axis=1)
        # Presence of any high-risk permission
        df['any_high_risk'] = df[high_risk_permissions].sum(axis=1) > 0
        # Count of high-risk permissions
        df['count_high_risk'] = df[high_risk_permissions].sum(axis=1)
        expected_cols = model.feature_names_in_
        df = df[expected_cols]  # Reorder columns to match the model's expected input
        # Scale numerical features using stored preprocessor
        scaled_data = pd.DataFrame(preprocessor.transform(df), columns=df.columns)
        scaled_data = scaled_data.reindex(columns=expected_cols)
        return scaled_data
    except Exception as e:
        print(f"Unexpected error in preprocessing: {e}")
        raise RuntimeError(f"Unexpected error: {e}")

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json(force=True)
        processed_data = preprocess_input(data, model, preprocessor)
        predictions = model.predict(processed_data)
        prediction_probabilities = model.predict_proba(processed_data)
        return jsonify(
            {
                'predictions': predictions.tolist(),
                # uncomment below if you want pred probs
                # 'probabilities': prediction_probabilities.tolist()
            }
        )
    except Exception as e:
        print(f"Error in prediction: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8080)
